<?xml version="1.0" encoding="utf-8"?>
<configuration>

  <textCollection color="red">
    <entry caption="Don´t repeat yourself (DRY)" text="Any duplication of code or even intermediate steps triggers mistakes and inconsistencies."/>
    <entry caption="Keep it simple, stupid (KISS)" text="If you do more than the simplest, you make the solution unnecessarily complicated and let your customers wait."/>
    <entry caption="Beware of optimizations!" text="Optimizations are always expensive. Use caution before you decide to go that route - very often the time is better spent on things that are actually beneficial for the customer."/>
    <entry caption="Favour composition over inheritance (FCoI)" text="Composition promotes loose coupling and testability of a system and is usually more flexible."/>
    <entry caption="Follow the boy scouts rule" text="Raise the bar just a little bit whenever a piece of work is touched. Get there completely free of bureaucratic planning. A grass-roots approach to improved quality."/>
    <entry caption="Root cause analysis" text="Treating symptoms only may bring fast relief - but in the long run it is more costsly. Always look beneath the surface of the problems, This will make you more efficient in the end."/>
    <entry caption="Use a version control system" text="Fear of damage to a &quot;running system&quot; paralyzes the software development. With a version control such fear is unfounded. The development can progress quickly and boldly."/>
    <entry caption="Apply Simple refactoring patterns" text="Code is easier to improve if we know typical improvement handles. Your application scenarios make sensitive to weak points in your code. As a recognized pattern, they strengthen the courage to use it."/>
    <entry caption="Reflect daily" text="No improvement, no progress, no learning without reflection. But only if reflection is also planned, she finds under the pressure of daily business also held."/>
  </textCollection>

  <textCollection color="orange">
    <entry caption="Single level of abstraction (SLA)" text="The maintenance of a abstraction level enhances readability."/>
    <entry caption="Single responsibility principle (SRP)" text="Focus facilitates understanding. A class with exactly one responsibility is easier to understand than a grocery store."/>
    <entry caption="Separation of concerns (SoC)" text="When a code unit has no clear purpose, it is hard to understand it, use it and to correct or enlarge it if necessary."/>
    <entry caption="Source code conventions" text="Source Code is read more often than written. Therefore conventions are essential to make it easy to read and understand the code."/>
    <entry caption="Issue tracking" text="You will not forget what you have written and you can effectively delegate and track the issues."/>
    <entry caption="Automated integration tests" text="Integration testing ensures that the code does what it should. Not to automate this recurrent activity is a waste of time."/>
    <entry caption="Read, read, read" text="Reading educates!"/>
    <entry caption="Reviews" text="Four eyes see more than two. If a developer explains its code to others, usually details appear that have not been considered."/>
  </textCollection>

  <textCollection color="yellow">
    <entry caption="Interface segregation principle (ISP)" text="Service specifications, which are independent of a concrete fulfillment, result in independent code."/>
    <entry caption="Dependency inversion principle" text="Precise testing requires isolation of classes. Isolation occurs when classes have no dependencies on implementations - neither at runtime, even at compile time. Specific dependencies should therefore be decided as late as possible. Best at runtime."/>
    <entry caption="Liskov substitution principle" text="Who has to do with inheritor wants no surprises when he is familiar with the testator."/>
    <entry caption="Principle of least astonishment" text="If a component surprisingly doesn't behave as expected, their application is unnecessarily complicated and error prone."/>
    <entry caption="Information hiding principle" text="By hiding details in an interface, dependencies are reduced."/>
    <entry caption="Automated unit tests" text="Only automated tests are performed really consistent. Precise tests are the best tests."/>
    <entry caption="Mockups (test dummies)" text="Without dummies no easy controllable tests."/>
    <entry caption="Code coverage analysis" text="Only trust tests, which you know that they really cover also the test area."/>
    <entry caption="Attend professional events" text="The best way we learn from others and in community."/>
    <entry caption="Complex refactorings" text="It is not possible to write code directly in the ultimate form."/>
  </textCollection>

  <textCollection color="lightgreen">
    <entry caption="Open closed principle" text="Because the risk to destabilize with new features a previously error-free system should be kept as low as possible."/>
    <entry caption="Tell, don´t ask" text="High cohesion and loose coupling are virtues. Public details of a state within a class disagree."/>
    <entry caption="Law of demeter" text="Dependencies of objects across multiple members of a service chain, lead to unsightly tight coupling."/>
    <entry caption="Continuous integration" text="Automation and centralization of software production make it more productive and reduce the risk of errors during delivery."/>
    <entry caption="Static code analysis (metrics)" text="Trust is good, control is better - and the more automatic, the easier it is."/>
    <entry caption="Inversion of control container" text="Only what is not hard-wired, can be easily reconfigured."/>
    <entry caption="Share experience" text="Who shares his knowledge, helps others as well as themselves"/>
    <entry caption="Measurement of errors" text="Only he who knows how many errors occur, can change its approach so that the error rate decreases."/>
  </textCollection>

  <textCollection color="lightblue">
    <entry caption="Design and implementation don´t overlap" text="Planning documents that have nothing in common with the implementation, do more harm than profit. Therefore do not give up the planning, but minimize the chance of inconsistency."/>
    <entry caption="Implementation reflects design" text="Reaction, which can vary arbitrarily from planning leads directly into unmaintainable implementation. Implementation therefore needs a set by the physical planning framework."/>
    <entry caption="You ain´t gonna need it (YAGNI)" text="Things that nobody needs, have no value. It is no time to waste."/>
    <entry caption="Continuous delivery" text="As a Clean Code Developer I want to be sure that the product is installed correctly by an installer. If I find out that only the customer, it is too late."/>
    <entry caption="Iterative development" text="Why? Free to von Clausewitz No draft, no implementation survives contact with the customer. Software development therefore does well to be able to correct its course."/>
    <entry caption="Component orientation" text="Software needs black-box modules, which can be developed and tested in parallel. This promotes evolvability, productivity and accuracy."/>
    <entry caption="Test first" text="The customer is king and determines the form of a service. Service implementations are only so precisely when they are driven by a client."/>
  </textCollection>

</configuration>
